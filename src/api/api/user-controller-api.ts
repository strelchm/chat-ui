/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IdDto } from '../models';
// @ts-ignore
import { UserDto } from '../models';
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary blockUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserUsingPOST: async (id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('blockUserUsingPOST', 'id', id)
            const localVarPath = `/api/users/{id}/block`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createUser
         * @param {UserDto} dto dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (dto: UserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dto' is not null or undefined
            assertParamExists('createUserUsingPOST', 'dto', dto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingDELETE: async (id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserUsingDELETE', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSelf
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfUsingPOST: async (userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUserById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsingGET: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserByIdUsingGET', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary patchUser
         * @param {string} id id
         * @param {UserDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserUsingPATCH: async (id: string, dto: UserDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchUserUsingPATCH', 'id', id)
            // verify required parameter 'dto' is not null or undefined
            assertParamExists('patchUserUsingPATCH', 'dto', dto)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unblockUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUserUsingPOST: async (id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unblockUserUsingPOST', 'id', id)
            const localVarPath = `/api/users/{id}/unblock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary blockUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockUserUsingPOST(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockUserUsingPOST(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createUser
         * @param {UserDto} dto dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(dto: UserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsingPOST(dto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsingDELETE(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserUsingDELETE(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsersUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSelf
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelfUsingPOST(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelfUsingPOST(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getUserById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdUsingGET(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary patchUser
         * @param {string} id id
         * @param {UserDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUserUsingPATCH(id: string, dto: UserDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUserUsingPATCH(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary unblockUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unblockUserUsingPOST(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unblockUserUsingPOST(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary blockUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserUsingPOST(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.blockUserUsingPOST(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createUser
         * @param {UserDto} dto dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(dto: UserDto, options?: any): AxiosPromise<IdDto> {
            return localVarFp.createUserUsingPOST(dto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingDELETE(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserUsingDELETE(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET(options?: any): AxiosPromise<Array<UserDto>> {
            return localVarFp.getAllUsersUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSelf
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfUsingPOST(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<UserDto> {
            return localVarFp.getSelfUsingPOST(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUserById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsingGET(id: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUserByIdUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary patchUser
         * @param {string} id id
         * @param {UserDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserUsingPATCH(id: string, dto: UserDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<UserDto> {
            return localVarFp.patchUserUsingPATCH(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unblockUser
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUserUsingPOST(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.unblockUserUsingPOST(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary blockUser
     * @param {string} id id
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public blockUserUsingPOST(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return UserControllerApiFp(this.configuration).blockUserUsingPOST(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createUser
     * @param {UserDto} dto dto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public createUserUsingPOST(dto: UserDto, options?: any) {
        return UserControllerApiFp(this.configuration).createUserUsingPOST(dto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteUser
     * @param {string} id id
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteUserUsingDELETE(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return UserControllerApiFp(this.configuration).deleteUserUsingDELETE(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getAllUsersUsingGET(options?: any) {
        return UserControllerApiFp(this.configuration).getAllUsersUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSelf
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getSelfUsingPOST(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return UserControllerApiFp(this.configuration).getSelfUsingPOST(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUserById
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserByIdUsingGET(id: string, options?: any) {
        return UserControllerApiFp(this.configuration).getUserByIdUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary patchUser
     * @param {string} id id
     * @param {UserDto} dto dto
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public patchUserUsingPATCH(id: string, dto: UserDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return UserControllerApiFp(this.configuration).patchUserUsingPATCH(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unblockUser
     * @param {string} id id
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public unblockUserUsingPOST(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return UserControllerApiFp(this.configuration).unblockUserUsingPOST(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }
}
