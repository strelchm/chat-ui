/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IdDto } from '../models';
// @ts-ignore
import { MessageDto } from '../models';
// @ts-ignore
import { PageMessageDto } from '../models';
/**
 * MessageControllerApi - axios parameter creator
 * @export
 */
export const MessageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createMessage
         * @param {string} roomId roomId
         * @param {MessageDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageUsingPOST: async (roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('createMessageUsingPOST', 'roomId', roomId)
            // verify required parameter 'dto' is not null or undefined
            assertParamExists('createMessageUsingPOST', 'dto', dto)
            const localVarPath = `/api/rooms/{roomId}/messages`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMessage
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageUsingDELETE: async (id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMessageUsingDELETE', 'id', id)
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteMessageUsingDELETE', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllMessages
         * @param {string} roomId roomId
         * @param {number} [offset] 
         * @param {boolean} [paged] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {boolean} [sortSorted] 
         * @param {boolean} [sortUnsorted] 
         * @param {boolean} [unpaged] 
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMessagesUsingGET: async (roomId: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getAllMessagesUsingGET', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/messages`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMessageById
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageByIdUsingGET: async (id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMessageByIdUsingGET', 'id', id)
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getMessageByIdUsingGET', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMessage
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {MessageDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageUsingPUT: async (id: string, roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMessageUsingPUT', 'id', id)
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('updateMessageUsingPUT', 'roomId', roomId)
            // verify required parameter 'dto' is not null or undefined
            assertParamExists('updateMessageUsingPUT', 'dto', dto)
            const localVarPath = `/api/rooms/{roomId}/messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageControllerApi - functional programming interface
 * @export
 */
export const MessageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createMessage
         * @param {string} roomId roomId
         * @param {MessageDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessageUsingPOST(roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageUsingPOST(roomId, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteMessage
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessageUsingDELETE(id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessageUsingDELETE(id, roomId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllMessages
         * @param {string} roomId roomId
         * @param {number} [offset] 
         * @param {boolean} [paged] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {boolean} [sortSorted] 
         * @param {boolean} [sortUnsorted] 
         * @param {boolean} [unpaged] 
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMessagesUsingGET(roomId: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMessagesUsingGET(roomId, offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMessageById
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageByIdUsingGET(id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageByIdUsingGET(id, roomId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMessage
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {MessageDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessageUsingPUT(id: string, roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessageUsingPUT(id, roomId, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageControllerApi - factory interface
 * @export
 */
export const MessageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createMessage
         * @param {string} roomId roomId
         * @param {MessageDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageUsingPOST(roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<IdDto> {
            return localVarFp.createMessageUsingPOST(roomId, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMessage
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageUsingDELETE(id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.deleteMessageUsingDELETE(id, roomId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllMessages
         * @param {string} roomId roomId
         * @param {number} [offset] 
         * @param {boolean} [paged] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {boolean} [sortSorted] 
         * @param {boolean} [sortUnsorted] 
         * @param {boolean} [unpaged] 
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMessagesUsingGET(roomId: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<PageMessageDto> {
            return localVarFp.getAllMessagesUsingGET(roomId, offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMessageById
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageByIdUsingGET(id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<MessageDto> {
            return localVarFp.getMessageByIdUsingGET(id, roomId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMessage
         * @param {string} id id
         * @param {string} roomId roomId
         * @param {MessageDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageUsingPUT(id: string, roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<MessageDto> {
            return localVarFp.updateMessageUsingPUT(id, roomId, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageControllerApi - object-oriented interface
 * @export
 * @class MessageControllerApi
 * @extends {BaseAPI}
 */
export class MessageControllerApi extends BaseAPI {
    /**
     * 
     * @summary createMessage
     * @param {string} roomId roomId
     * @param {MessageDto} dto dto
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public createMessageUsingPOST(roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return MessageControllerApiFp(this.configuration).createMessageUsingPOST(roomId, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMessage
     * @param {string} id id
     * @param {string} roomId roomId
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public deleteMessageUsingDELETE(id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return MessageControllerApiFp(this.configuration).deleteMessageUsingDELETE(id, roomId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllMessages
     * @param {string} roomId roomId
     * @param {number} [offset] 
     * @param {boolean} [paged] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {boolean} [sortSorted] 
     * @param {boolean} [sortUnsorted] 
     * @param {boolean} [unpaged] 
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getAllMessagesUsingGET(roomId: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return MessageControllerApiFp(this.configuration).getAllMessagesUsingGET(roomId, offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMessageById
     * @param {string} id id
     * @param {string} roomId roomId
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getMessageByIdUsingGET(id: string, roomId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return MessageControllerApiFp(this.configuration).getMessageByIdUsingGET(id, roomId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMessage
     * @param {string} id id
     * @param {string} roomId roomId
     * @param {MessageDto} dto dto
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public updateMessageUsingPUT(id: string, roomId: string, dto: MessageDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return MessageControllerApiFp(this.configuration).updateMessageUsingPUT(id, roomId, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }
}
