/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IdDto } from '../models';
// @ts-ignore
import { RoomDto } from '../models';
// @ts-ignore
import { WrapperDtoArrayuuid } from '../models';
/**
 * RoomControllerApi - axios parameter creator
 * @export
 */
export const RoomControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addMembers
         * @param {string} id id
         * @param {WrapperDtoArrayuuid} memberId memberId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersUsingPOST: async (id: string, memberId: WrapperDtoArrayuuid, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addMembersUsingPOST', 'id', id)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('addMembersUsingPOST', 'memberId', memberId)
            const localVarPath = `/api/rooms/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addModerator
         * @param {string} id id
         * @param {IdDto} moderatorId moderatorId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModeratorUsingPOST: async (id: string, moderatorId: IdDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addModeratorUsingPOST', 'id', id)
            // verify required parameter 'moderatorId' is not null or undefined
            assertParamExists('addModeratorUsingPOST', 'moderatorId', moderatorId)
            const localVarPath = `/api/rooms/{id}/moderators`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moderatorId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createRoom
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoomUsingPOST: async (dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dto' is not null or undefined
            assertParamExists('createRoomUsingPOST', 'dto', dto)
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMembers
         * @param {string} id id
         * @param {string} memberId memberId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembersUsingDELETE: async (id: string, memberId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMembersUsingDELETE', 'id', id)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('deleteMembersUsingDELETE', 'memberId', memberId)
            const localVarPath = `/api/rooms/{id}/members/{memberId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteModerator
         * @param {string} id id
         * @param {string} moderatorId moderatorId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModeratorUsingDELETE: async (id: string, moderatorId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteModeratorUsingDELETE', 'id', id)
            // verify required parameter 'moderatorId' is not null or undefined
            assertParamExists('deleteModeratorUsingDELETE', 'moderatorId', moderatorId)
            const localVarPath = `/api/rooms/{id}/moderators/{moderatorId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"moderatorId"}}`, encodeURIComponent(String(moderatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteRoom
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoomUsingDELETE: async (id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRoomUsingDELETE', 'id', id)
            const localVarPath = `/api/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllRoomsByUser
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoomsByUserUsingGET: async (userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms/own`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllRooms
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoomsUsingGET: async (userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRoomById
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomByIdUsingGET: async (id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoomByIdUsingGET', 'id', id)
            const localVarPath = `/api/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary patchRoom
         * @param {string} id id
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoomUsingPATCH: async (id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchRoomUsingPATCH', 'id', id)
            // verify required parameter 'dto' is not null or undefined
            assertParamExists('patchRoomUsingPATCH', 'dto', dto)
            const localVarPath = `/api/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateRoom
         * @param {string} id id
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoomUsingPUT: async (id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRoomUsingPUT', 'id', id)
            // verify required parameter 'dto' is not null or undefined
            assertParamExists('updateRoomUsingPUT', 'dto', dto)
            const localVarPath = `/api/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCreated !== undefined) {
                localVarQueryParameter['user.created'] = (userCreated as any instanceof Date) ?
                    (userCreated as any).toISOString() :
                    userCreated;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userLogin !== undefined) {
                localVarQueryParameter['user.login'] = userLogin;
            }

            if (userPassword !== undefined) {
                localVarQueryParameter['user.password'] = userPassword;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['user.status'] = userStatus;
            }

            if (userUpdated !== undefined) {
                localVarQueryParameter['user.updated'] = (userUpdated as any instanceof Date) ?
                    (userUpdated as any).toISOString() :
                    userUpdated;
            }

            if (userUserAppRole !== undefined) {
                localVarQueryParameter['user.userAppRole'] = userUserAppRole;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomControllerApi - functional programming interface
 * @export
 */
export const RoomControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addMembers
         * @param {string} id id
         * @param {WrapperDtoArrayuuid} memberId memberId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMembersUsingPOST(id: string, memberId: WrapperDtoArrayuuid, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMembersUsingPOST(id, memberId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addModerator
         * @param {string} id id
         * @param {IdDto} moderatorId moderatorId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addModeratorUsingPOST(id: string, moderatorId: IdDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addModeratorUsingPOST(id, moderatorId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createRoom
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoomUsingPOST(dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoomUsingPOST(dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteMembers
         * @param {string} id id
         * @param {string} memberId memberId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMembersUsingDELETE(id: string, memberId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMembersUsingDELETE(id, memberId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteModerator
         * @param {string} id id
         * @param {string} moderatorId moderatorId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModeratorUsingDELETE(id: string, moderatorId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModeratorUsingDELETE(id, moderatorId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteRoom
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoomUsingDELETE(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoomUsingDELETE(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllRoomsByUser
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoomsByUserUsingGET(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoomsByUserUsingGET(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllRooms
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoomsUsingGET(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoomsUsingGET(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getRoomById
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoomByIdUsingGET(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomByIdUsingGET(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary patchRoom
         * @param {string} id id
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRoomUsingPATCH(id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRoomUsingPATCH(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateRoom
         * @param {string} id id
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoomUsingPUT(id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoomUsingPUT(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomControllerApi - factory interface
 * @export
 */
export const RoomControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary addMembers
         * @param {string} id id
         * @param {WrapperDtoArrayuuid} memberId memberId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersUsingPOST(id: string, memberId: WrapperDtoArrayuuid, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.addMembersUsingPOST(id, memberId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addModerator
         * @param {string} id id
         * @param {IdDto} moderatorId moderatorId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModeratorUsingPOST(id: string, moderatorId: IdDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.addModeratorUsingPOST(id, moderatorId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createRoom
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoomUsingPOST(dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<IdDto> {
            return localVarFp.createRoomUsingPOST(dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMembers
         * @param {string} id id
         * @param {string} memberId memberId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMembersUsingDELETE(id: string, memberId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.deleteMembersUsingDELETE(id, memberId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteModerator
         * @param {string} id id
         * @param {string} moderatorId moderatorId
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModeratorUsingDELETE(id: string, moderatorId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.deleteModeratorUsingDELETE(id, moderatorId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteRoom
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoomUsingDELETE(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoomUsingDELETE(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllRoomsByUser
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoomsByUserUsingGET(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<Array<RoomDto>> {
            return localVarFp.getAllRoomsByUserUsingGET(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllRooms
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoomsUsingGET(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<Array<RoomDto>> {
            return localVarFp.getAllRoomsUsingGET(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRoomById
         * @param {string} id id
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomByIdUsingGET(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<RoomDto> {
            return localVarFp.getRoomByIdUsingGET(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary patchRoom
         * @param {string} id id
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoomUsingPATCH(id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<RoomDto> {
            return localVarFp.patchRoomUsingPATCH(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateRoom
         * @param {string} id id
         * @param {RoomDto} dto dto
         * @param {string} [userCreated] 
         * @param {string} [userId] 
         * @param {string} [userLogin] 
         * @param {string} [userPassword] 
         * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
         * @param {string} [userUpdated] 
         * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoomUsingPUT(id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any): AxiosPromise<RoomDto> {
            return localVarFp.updateRoomUsingPUT(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomControllerApi - object-oriented interface
 * @export
 * @class RoomControllerApi
 * @extends {BaseAPI}
 */
export class RoomControllerApi extends BaseAPI {
    /**
     * 
     * @summary addMembers
     * @param {string} id id
     * @param {WrapperDtoArrayuuid} memberId memberId
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public addMembersUsingPOST(id: string, memberId: WrapperDtoArrayuuid, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).addMembersUsingPOST(id, memberId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addModerator
     * @param {string} id id
     * @param {IdDto} moderatorId moderatorId
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public addModeratorUsingPOST(id: string, moderatorId: IdDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).addModeratorUsingPOST(id, moderatorId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createRoom
     * @param {RoomDto} dto dto
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public createRoomUsingPOST(dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).createRoomUsingPOST(dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMembers
     * @param {string} id id
     * @param {string} memberId memberId
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public deleteMembersUsingDELETE(id: string, memberId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).deleteMembersUsingDELETE(id, memberId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteModerator
     * @param {string} id id
     * @param {string} moderatorId moderatorId
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public deleteModeratorUsingDELETE(id: string, moderatorId: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).deleteModeratorUsingDELETE(id, moderatorId, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteRoom
     * @param {string} id id
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public deleteRoomUsingDELETE(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).deleteRoomUsingDELETE(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllRoomsByUser
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public getAllRoomsByUserUsingGET(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).getAllRoomsByUserUsingGET(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllRooms
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public getAllRoomsUsingGET(userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).getAllRoomsUsingGET(userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRoomById
     * @param {string} id id
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public getRoomByIdUsingGET(id: string, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).getRoomByIdUsingGET(id, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary patchRoom
     * @param {string} id id
     * @param {RoomDto} dto dto
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public patchRoomUsingPATCH(id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).patchRoomUsingPATCH(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateRoom
     * @param {string} id id
     * @param {RoomDto} dto dto
     * @param {string} [userCreated] 
     * @param {string} [userId] 
     * @param {string} [userLogin] 
     * @param {string} [userPassword] 
     * @param {'ACTIVE' | 'GLOBAL_BLOCKED'} [userStatus] 
     * @param {string} [userUpdated] 
     * @param {'ADMIN' | 'BOT' | 'CLIENT'} [userUserAppRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public updateRoomUsingPUT(id: string, dto: RoomDto, userCreated?: string, userId?: string, userLogin?: string, userPassword?: string, userStatus?: 'ACTIVE' | 'GLOBAL_BLOCKED', userUpdated?: string, userUserAppRole?: 'ADMIN' | 'BOT' | 'CLIENT', options?: any) {
        return RoomControllerApiFp(this.configuration).updateRoomUsingPUT(id, dto, userCreated, userId, userLogin, userPassword, userStatus, userUpdated, userUserAppRole, options).then((request) => request(this.axios, this.basePath));
    }
}
